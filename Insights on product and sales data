{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1AZ499y4cnmAqiXPb5y8Rp2BZEXVnS2b-",
      "authorship_tag": "ABX9TyPv/8nbWIXONYWKtjSazl2x",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nisha9876-png/Data-Science-job-analysis/blob/main/Insights%20on%20product%20and%20sales%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "KVJ6MuoQph7t"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "product_path = \"/content/drive/MyDrive/dataset/product.csv\"\n",
        "sales_path= \"/content/drive/MyDrive/dataset/sales.csv\"\n",
        "\n"
      ],
      "metadata": {
        "id": "xcyqyXHzwoF9"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "product_df = pd.read_csv(product_path)\n",
        "sales_df = pd.read_csv(sales_path)"
      ],
      "metadata": {
        "id": "1ZBPzaZpD2Bn"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Product Data Loaded:\")\n",
        "print(product_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VG4nWJyECSDM",
        "outputId": "27038649-d5dc-4e2f-87a3-c6309cc32bfa"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Product Data Loaded:\n",
            "   Unnamed: 0     brand       flavour  volume_per_joghurt_g  packsize  \\\n",
            "0           0   Mueller     blueberry                   150         6   \n",
            "1           1     Oikos     chocolate                  1000         1   \n",
            "2           2  Alnatura    strawberry                  1000         1   \n",
            "3           3   Mueller  straciatella                   500         6   \n",
            "4           4    Danone  straciatella                   150         6   \n",
            "\n",
            "   product_id  \n",
            "0           0  \n",
            "1           1  \n",
            "2           2  \n",
            "3           3  \n",
            "4           4  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Sales Data Loaded:\")\n",
        "print(sales_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rLeTZe64EIMX",
        "outputId": "f8cfe41d-7e7d-4ba7-cf38-f87474b9cdd4"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sales Data Loaded:\n",
            "   Unnamed: 0        date  product_id  price   units\n",
            "0           0  2020-01-01           0   4.65  1126.0\n",
            "1           1  2020-01-02           0   4.76  1205.0\n",
            "2           2  2020-01-03           0   5.22  1007.0\n",
            "3           3  2020-01-04           0   5.45  1282.0\n",
            "4           4  2020-01-05           0   3.33  1037.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(product_df.head())\n",
        "print(sales_df.head())\n",
        "print(product_df.info())\n",
        "print(sales_df.info())\n",
        "print(product_df.describe())\n",
        "print(sales_df.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AElJ5XAzEPjE",
        "outputId": "88df48e0-cc0a-444d-d7d2-526b91dc2f4e"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Unnamed: 0     brand       flavour  volume_per_joghurt_g  packsize  \\\n",
            "0           0   Mueller     blueberry                   150         6   \n",
            "1           1     Oikos     chocolate                  1000         1   \n",
            "2           2  Alnatura    strawberry                  1000         1   \n",
            "3           3   Mueller  straciatella                   500         6   \n",
            "4           4    Danone  straciatella                   150         6   \n",
            "\n",
            "   product_id  \n",
            "0           0  \n",
            "1           1  \n",
            "2           2  \n",
            "3           3  \n",
            "4           4  \n",
            "   Unnamed: 0        date  product_id  price   units\n",
            "0           0  2020-01-01           0   4.65  1126.0\n",
            "1           1  2020-01-02           0   4.76  1205.0\n",
            "2           2  2020-01-03           0   5.22  1007.0\n",
            "3           3  2020-01-04           0   5.45  1282.0\n",
            "4           4  2020-01-05           0   3.33  1037.0\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 27 entries, 0 to 26\n",
            "Data columns (total 6 columns):\n",
            " #   Column                Non-Null Count  Dtype \n",
            "---  ------                --------------  ----- \n",
            " 0   Unnamed: 0            27 non-null     int64 \n",
            " 1   brand                 27 non-null     object\n",
            " 2   flavour               27 non-null     object\n",
            " 3   volume_per_joghurt_g  27 non-null     int64 \n",
            " 4   packsize              27 non-null     int64 \n",
            " 5   product_id            27 non-null     int64 \n",
            "dtypes: int64(4), object(2)\n",
            "memory usage: 1.4+ KB\n",
            "None\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 260 entries, 0 to 259\n",
            "Data columns (total 5 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   Unnamed: 0  260 non-null    int64  \n",
            " 1   date        260 non-null    object \n",
            " 2   product_id  260 non-null    int64  \n",
            " 3   price       260 non-null    float64\n",
            " 4   units       260 non-null    float64\n",
            "dtypes: float64(2), int64(2), object(1)\n",
            "memory usage: 10.3+ KB\n",
            "None\n",
            "       Unnamed: 0  volume_per_joghurt_g   packsize  product_id\n",
            "count   27.000000             27.000000  27.000000   27.000000\n",
            "mean    13.000000            625.925926   4.703704   13.000000\n",
            "std      7.937254            342.886607   2.232880    7.937254\n",
            "min      0.000000            150.000000   1.000000    0.000000\n",
            "25%      6.500000            500.000000   3.500000    6.500000\n",
            "50%     13.000000            500.000000   6.000000   13.000000\n",
            "75%     19.500000           1000.000000   6.000000   19.500000\n",
            "max     26.000000           1000.000000   6.000000   26.000000\n",
            "       Unnamed: 0  product_id       price        units\n",
            "count  260.000000  260.000000  260.000000   260.000000\n",
            "mean   133.611538   12.911538    5.288538  1177.496154\n",
            "std     78.528842    7.846738    1.881547   401.771103\n",
            "min      0.000000    0.000000    1.460000    16.000000\n",
            "25%     64.750000    6.000000    3.965000   944.000000\n",
            "50%    132.500000   13.000000    5.140000  1275.500000\n",
            "75%    201.250000   20.000000    6.785000  1453.250000\n",
            "max    269.000000   26.000000    9.420000  2170.000000\n"
          ]
        }
      ]
    }
  ]
}